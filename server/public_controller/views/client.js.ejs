<script>

const isLearner = <%= (P.sess.role == 'Learner') ? true : false %>;
const course_id = <%= (P.course_id) ? P.course_id : null %>;
const P = <%- (P) ? JSON.stringify(P) : null %>;
const me = <%- (P && P.me) ? JSON.stringify(P.me) : null %>;

var app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
  },
  template: `
    <div>
      {{ message }}
    </div>
  `,
});

Vue.component('course-listing-item', {
  props: {
    course: {
      type: Object
    }
  },
  template: `
    <div class="col-lg-3 col-md-6 mb-4">
      <div class="card h-100">
        <div class="card-img-top card-course-cover" :style="'background-image:url(/course_covers/' + course.course_id + '.png)'"/>
        <div class="card-body">
          <h4 class="card-title">{{ course.title }}</h4>
          <p style="text-align: left" class="card-text">Number of TA: {{ course.numTaActive }}
          <br> Number of students: {{ course.numStudentActive }}</p>
        </div>
        <div class="card-footer">
          <a :href="'/courses/' + course.course_id" class="btn btn-primary btn-lg">Join</a>
        </div>
      </div>
    </div>
  `,
});

var course_listing = new Vue({
  el: '#course-listing',
  data: {
    rawCourses: <%- (P.courses) ? JSON.stringify(P.courses) : JSON.stringify(null) %>,
    courses: []
  },
  methods: {
    getCourses: function() {
      this.courses = [ ];
      for (const key in this.rawCourses) {
        this.rawCourses[key].numTaActive = 0;
        this.rawCourses[key].numStudentActive = 0;
        this.courses.push(this.rawCourses[key]);
      }
      return this.courses;
    }
  }
});

var explore_section = new Vue({
  el: '#explore-section',
  data: {
    explores: {
      'Student' :[
        {
          title: 'Events',
          href: '/eventchain',
          pin: 'https://www.leedsandyorkpft.nhs.uk/news/wp-content/uploads/sites/4/2017/03/events-icon-680x680.jpg'
        }
      ],
      'Teaching Assistants' :[
        {
          title: 'Networkflow',
          href: 'https://datduyng.github.io/networkflow/simulation.html',
          pin: 'https://user-images.githubusercontent.com/35666615/52318190-de194580-2988-11e9-929d-09aec2551b13.png'
        },
        {
          title: 'Networkflow',
          href: 'https://datduyng.github.io/networkflow/simulation.html',
          pin: 'https://user-images.githubusercontent.com/35666615/52318190-de194580-2988-11e9-929d-09aec2551b13.png'
        },
        {
          title: 'Networkflow',
          href: 'https://datduyng.github.io/networkflow/simulation.html',
          pin: 'https://user-images.githubusercontent.com/35666615/52318190-de194580-2988-11e9-929d-09aec2551b13.png'
        },
      ],
    }
  }
});

Vue.component('queue-item', {
  props: {
    ticket: Object,
    isLearner: Boolean, 
    me: Object,
    rawTickets: Object,
      usersInfo: Object,
  }, 
  template: `
    <li class="list-group-item d-flex align-items-center">
      <div class="avatar queue_user_ava" v-bind:style="{'background-image': 'url(/api/chat/dl_img?url=' + ticket.info.image + ')'}">
      </div>
      <div>
        <div class="queue user-name">{{ ticket.info.full_name }}</div>
        <div class="message">Description: {{ ticket.notes.this_is_the_note }}</div>
      </div>
      <span v-if="(isLearner && ticket.status!=='Waiting') || (!isLearner && ticket.assignee !== null && ticket.assignee != me.info.user_id)" class="date text-mutted ml-auto">Helping by<br>{{ usersInfo[ticket.assignee].full_name }}</span>
      <div v-else class="ml-auto">
        <button class="btn btn-outline-success my-2 my-sm-0" type="submit"
            v-on:click="onClickTeacherHelpStudent(ticket.ticket_id)"
                v-if="isAbleToHelpNextInLineAsTeacher"
            >
            Help
        </button>

         <button class="btn btn-outline-success my-2 my-sm-0" type="submit"
            v-on:click="onClickTeacherMarkDone(ticket.ticket_id)"
                 v-if="isAbleToMarkDoneAsTeacher"
            >
            Done helping
        </button>
      </div>
    </li>
  `,
  methods: {
    onClickTeacherHelpStudent: function(ticketid) {
      $.get(`/api/user/T-help-student`, {ticketid: ""+ticketid}, (res) => {
        notificationToast(`res: ${res}`);
        this.tstatus = 'resolving';
      });
    },
    onClickTeacherMarkDone: function(ticketid) {
      $.get(`/api/user/TS-done`, {ticketid:""+ticketid}, (res, error) => {
        this.tstatus = 'available';
        if (res !== "ok") {
          notificationToast(`res: ${res.err}`, 'error');
        }
      })
    },
  },
  computed: {
    isAbleToMarkDoneAsTeacher: function() {
      return !this.isLearner && 
            this.me.ticket &&
            this.me.ticket.ticket_id == this.ticket.ticket_id;
    }, 
    isAbleToHelpNextInLineAsTeacher: function(){
      return !this.isLearner && 
          this.me.ticket == null &&
          this.ticket.status == 'Waiting';
    },
  }
});


Vue.component('chat-item', {
  props: {
    chat: Object,
  },
  // data: function() {
  //   return {
  //     pinned: !this.chat.pinned
  //   }
  // },
  template: `
    <div class="chat-message clearfix">
      <img
        :src="'/api/chat/dl_img?url=' + chat.image"
        alt=""
        width="32"
        height="32"
      />

      <div class="chat-message-content clearfix">
        <span class="chat-time">{{ moment(chat.created_at).fromNow() }}</span>

        <h5>
          {{ chat.last_name.length > 0 ? chat.last_name : chat.full_name }}
          <button class="float-right mr-3 btn"
              v-if="<%=P.sess.user.role!=='Learner'%>"
              v-on:click="toggle_pin()"
              :style="!chat.pinned ? 'font-size:12px' : 'font-size:10px;color:#ddd'"
            >
              {{ !chat.pinned ? 'pin' : 'unpin'   }}
          </button>
        </h5>
        
        <p>
          {{ chat.msg }}
        </p>
      </div>
      <!-- end chat-message-content -->
    </div>
    <!-- end chat-message -->
  `,
  methods: {
    toggle_pin: function () {
      let data = this.chat.pinned ? 0 : 1;
      $.get(`/api/user/pin/${data}`, { msg_id: this.chat.msg_id+""}, (res) => {
        console.log('onClickPinPost', res);
        //this.pinned = !this.pinned;
      });
    },
  }
});

let queue_status = new Vue({
  el: '#queue-status', 
  data: {
    tickets: [],
    users_info: <%- P.course ? JSON.stringify(P.course.users_info) : JSON.stringify(null) %>,
    status: <%- P.me.ticket ? JSON.stringify("resolving") : JSON.stringify("needhelp") %>,
    tstatus: <%- P.me.ticket ? JSON.stringify("resolving") : JSON.stringify("available") %>,
    isAbleToHelp: false,
    isLearner: isLearner,
    me: me,
    rawTickets: <%- P.course ? JSON.stringify(P.course.tickets) : JSON.stringify({ }) %>,
  },
  methods: {
    updateData: function(newData) {
      this.rawTickets = newData.tickets;
      this.users_info = newData.users_info;
      this.status = this.me.ticket ? 'resolving' : 'needhelp';
      this.tstatus = this.me.ticket ? 'resolving' : 'available';
      this.tickets = this.getTickets();
      this.isAbleToHelp = false;
    },
    updateMe: function(newData) {
      this.me = newData;
    },
    getTickets: function() {
      this.tickets = [ ];
      for ( const key in this.rawTickets ) {
       this.rawTickets[key].info = this.users_info[this.rawTickets[key].user_id];
       this.tickets.push(this.rawTickets[key]); 
      }
      this.tickets = this.tickets.sort((i1, i2) => {
        return (i1.created_at - i2.created_at);
      })
      return this.tickets;
    },
    onClickGetHelp: function() {
        bootbox.prompt("What do you need help with?", function(msg){
            if(msg == undefined) return;
              let queryParams = {
                course_id: course_id,
                note: msg
              };

              $.get(`/api/user/S-get-help`,queryParams, (res) => {
                if (res != "ok") {
                  notificationToast(res)
                }
                console.log('res', res);
                this.status = "resolving";
              });
        });

    },
    onClickDoneResolving: function() {
      $.get(`/api/user/TS-done`, {ticketid: `${course_id}:${P.sess.uid}`}, (res) => {
        console.log('res', res);
        this.status = "needhelp"
      });
    }, 
    onClickHelpNextInLine: function() {
      console.log('onClickHelpNextInLine');
      let ticketid = -1;
      for(let d of this.tickets) if(d.status === 'Waiting') {ticketid = d.ticket_id; break;}
      if(ticketid !== -1) {
          $.get(`/api/user/T-help-student`, {ticketid: ticketid+""}, (res) => {
            notificationToast(`${res}`, 'info');
          });
      }
    },
  },
  created: function() {
    this.getTickets();
  },
  computed: {
    isAbleToHelpNextInLineAsTeacher: function(){
      let filtered = Object.values(this.rawTickets)
      .filter((v) => v.status == 'Waiting');
      return !this.isLearner && 
          this.me.ticket == null &&
          filtered.length > 0;
    },
    isAbleToMarkDoneAsStudent: function(){
      return this.isLearner && this.me.ticket != null;
    },
    isAbleGetHelpAsStudent: function(){
      return this.isLearner && this.me.ticket == null; 
    }
  },
});

let user_list = new Vue({
  el: '#user-list',
  data: {
    users: <%- (P.course) ? JSON.stringify(P.course.users_info) : JSON.stringify(null) %>,
    onlines: <%- (P.course) ? JSON.stringify(P.course.online) : JSON.stringify(null) %>,
  },
  methods: {
    filteredTeacher: function() {

    }
  }

});

let vueChat = new Vue({
  el: '#chat-section',
  data: {
    chats: [],
  },
  methods: {
    addChat: function(chat){
      this.chats.push(chat);
    },
    setChats: function(chats){
      this.chats = chats;
    },
    updatePinned: function(chat) {
        for(let v of this.chats) {
            if(v.msg_id == chat.msg_id) {
                v.pinned = chat.pinned;
                break;
            }
        }
    }
  }

});

Vue.component('annoucement-item', {
  props: {
    annoucement: {
      type: Object
    }
  },
  template: `
        <div class="toast show myannounce">
            <div class="toast-header">
                <strong class="mr-auto text-primary">{{'From: ' + annoucement.full_name}}</strong>
                <small class="text-muted">{{ moment(annoucement.created_at).fromNow() }}</small>
                <button v-if="<%=P.sess.user.role!=='Learner'%>" type="button" class="ml-2 mb-1 close" aria-label="Close" v-on:click="unpin()">&times;</button>
            </div>
            <div class="toast-body">{{ annoucement.msg }}</div>
        </div>
  `,
  methods: {
    unpin: function() {
        $.get(`/api/user/pin/0`, { msg_id: this.annoucement.msg_id+""}, (res) => {
        });
    }
  }
});

let vue_annoucement = new Vue({
  el: '#annoucement-list',
  data: {
    annoucements : [ ],
  }, 
  methods: {
    setAnnoucement: function(data) {
      this.annoucements = data;
      // this.$forceUpdate();
      // setTimeout(() => $(".toast").toast("show"), 0);
    },
    addOrRemove: function(d) {
      if (d.pinned) {
        this.annoucements.push(d);
      } else {
        var array = this.annoucements;
        for (let i = 0; i < array.length; i++) {
          if (array[i].msg_id === d.msg_id) {
              array.splice(i, 1);
              break;
          }
        }
      }
      // this.$forceUpdate();
      // setTimeout(() => $(".toast").toast("show"), 0);
    },
  },
  mounted: function() {
  }
});

function userLogout() {
  console.log('logout');
  $.post('/logout', {});
  window.location.href = "https://canvas.instructure.com/";
}

</script>